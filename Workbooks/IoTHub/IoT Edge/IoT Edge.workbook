{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "9a841aa3-338a-4759-af6a-6e05f5def218",
            "version": "KqlParameterItem/1.0",
            "name": "Subscription",
            "label": "Subscriptions",
            "type": 6,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "includeAll": false,
              "showDefault": false
            },
            "defaultValue": "value::all"
          },
          {
            "id": "24d1d6ff-f40b-4a84-9be9-421c714529f5",
            "version": "KqlParameterItem/1.0",
            "name": "ResourceGroups",
            "label": "Resource groups",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "Resources\r\n| summarize by resourceGroup\r\n| order by resourceGroup asc\r\n| project id=resourceGroup, resourceGroup",
            "crossComponentResources": [
              "{Subscription}"
            ],
            "value": [
              "value::all"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "8f897994-a169-4e12-b254-d22141f77209",
            "version": "KqlParameterItem/1.0",
            "name": "ResourceTypes",
            "label": "Resource types",
            "type": 7,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "where \"*\" in ({ResourceGroups}) or resourceGroup in ({ResourceGroups})\r\n| summarize by type\r\n| where type == 'microsoft.devices/iothubs'\r\n| project type, label=type\r\n",
            "crossComponentResources": [
              "{Subscription}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "84d3f66b-1f8a-4bbd-ba23-bb6690fe10a3",
            "version": "KqlParameterItem/1.0",
            "name": "CurrentWorkbooksHub",
            "type": 5,
            "description": "The current IoT Hub from which this workbook was opened.",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "resourceTypeFilter": {
                "microsoft.devices/iothubs": true
              },
              "additionalResourceOptions": [
                "value::1"
              ],
              "showDefault": false
            },
            "defaultValue": "value::1",
            "label": "Current IoT Hub"
          },
          {
            "id": "a7c83525-3069-4165-b556-d2d29378900a",
            "version": "KqlParameterItem/1.0",
            "name": "InsightsMetricsExist",
            "label": "Insights Metrics Exist",
            "type": 1,
            "description": "Checks if the InsightsMetrics table exists yet to conditionally inform visibility of other items in the workbook.",
            "query": "let hasNonEmptyTable = (T:string) \n{ \n   toscalar( union isfuzzy=true ( table(T) | count as Count ), (print Count=0) | summarize sum(Count) ) > 0\n};\nlet TableName = 'InsightsMetrics';\nprint IsPresent=iif(hasNonEmptyTable(TableName), \"yes\", \"no\")",
            "crossComponentResources": [
              "{CurrentWorkbooksHub}"
            ],
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 259200000
            },
            "queryType": 0,
            "resourceType": "microsoft.devices/iothubs"
          },
          {
            "id": "971a710e-df6b-40f8-a9f0-20b363933262",
            "version": "KqlParameterItem/1.0",
            "name": "genTestRows",
            "label": "Row gen + randomization factor",
            "type": 1,
            "description": "For test purposes.  Set it to '1' to randomize data for existing results.  Set it to > 1 to generate X additional rows for each actual row.  E.g. if there are 25 actual devices and I set this to 4 then I'll end up with 100 devices.",
            "query": "{\"version\":\"1.0.0\",\"content\":\"\\\"0\\\"\",\"transformers\":null}",
            "isHiddenWhenLocked": true,
            "queryType": 8
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.devices/iothubs"
      },
      "name": "fleet view parameters",
      "styleSettings": {
        "margin": "0px",
        "padding": "0px"
      }
    },
    {
      "type": 1,
      "content": {
        "json": "# No metrics data from IoT Edge devices detected in the last 3 days\n\n## Please on-board with instructions at **[aka.ms/edgemon-docs](https://aka.ms/edgemon-docs)**\n\n<br>\nðŸ’¡*If you've just on-boarded,  it can take up to 15 minutes for data to be displayed.*"
      },
      "conditionalVisibility": {
        "parameterName": "InsightsMetricsExist",
        "comparison": "isEqualTo",
        "value": "no"
      },
      "name": "No data text view"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "f60ea0a0-3703-44ca-a59b-df0246423f41",
                  "version": "KqlParameterItem/1.0",
                  "name": "IoTHub",
                  "label": "IoT Hub resources",
                  "type": 5,
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "Resources\r\n| where \"*\" in ({ResourceTypes}) or type in~({ResourceTypes})\r\n| where '*' in~({ResourceGroups}) or resourceGroup in~({ResourceGroups}) \r\n| order by name asc\r\n| extend Rank = row_number()\r\n| where type == 'microsoft.devices/iothubs'\r\n| project value = id, label = name, selected = id == \"{CurrentWorkbooksHub}\", group = resourceGroup",
                  "crossComponentResources": [
                    "{Subscription}"
                  ],
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "showDefault": false
                  },
                  "queryType": 1,
                  "resourceType": "microsoft.resourcegraph/resources"
                },
                {
                  "id": "c30f3f07-6d01-4109-9765-70e1260768b1",
                  "version": "KqlParameterItem/1.0",
                  "name": "timeRange",
                  "label": "Time range",
                  "type": 4,
                  "isRequired": true,
                  "value": {
                    "durationMs": 7200000
                  },
                  "typeSettings": {
                    "selectableValues": [
                      {
                        "durationMs": 3600000
                      },
                      {
                        "durationMs": 7200000
                      },
                      {
                        "durationMs": 14400000
                      },
                      {
                        "durationMs": 43200000
                      },
                      {
                        "durationMs": 86400000
                      },
                      {
                        "durationMs": 172800000
                      },
                      {
                        "durationMs": 259200000
                      },
                      {
                        "durationMs": 604800000
                      },
                      {
                        "durationMs": 1209600000
                      },
                      {
                        "durationMs": 2592000000
                      }
                    ],
                    "allowCustom": true
                  }
                },
                {
                  "id": "8f6ac903-cbd0-49bb-a996-ede1f2596644",
                  "version": "KqlParameterItem/1.0",
                  "name": "showThresholds",
                  "label": "Show Thresholds",
                  "type": 10,
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    { \"value\" : \"false\", \"label\" : \"No\", \"selected\" : true },\r\n    { \"value\" : \"true\", \"label\" : \"Yes\" }\r\n]"
                },
                {
                  "id": "060313e0-e2a6-4cc1-98fb-70d6cdd8c198",
                  "version": "KqlParameterItem/1.0",
                  "name": "ShowTips",
                  "label": "Show Tips",
                  "type": 10,
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    { \"value\" : \"false\", \"label\" : \"No\", \"selected\" : true },\r\n    { \"value\" : \"true\", \"label\" : \"Yes\" }\r\n]"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.devices/iothubs"
            },
            "customWidth": "85",
            "name": "results query parameters"
          },
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "nav",
              "links": [
                {
                  "id": "dce88bb5-9e4a-4e39-b843-e89a951aacca",
                  "cellValue": "https://forms.office.com/r/72TsdCZ8mF",
                  "linkTarget": "Url",
                  "linkLabel": "Give feedback",
                  "preText": "ðŸ™‚",
                  "postText": "",
                  "style": "link"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "InsightsMetricsExist",
              "comparison": "isEqualTo",
              "value": "yes"
            },
            "customWidth": "15",
            "name": "give feedback",
            "styleSettings": {
              "margin": "2px 4px",
              "padding": "10px 0px 19px 0px"
            }
          },
          {
            "type": 1,
            "content": {
              "json": "Use the _IoT Hub resources_ drop-down to include results from additional IoT Hubs.",
              "style": "info"
            },
            "conditionalVisibility": {
              "parameterName": "ShowTips",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "show tip - expand scope to multiple IoT Hubs",
            "styleSettings": {
              "padding": "8px"
            }
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "title": "Health Thresholds (defaults)",
              "loadType": "always",
              "items": [
                {
                  "type": 9,
                  "content": {
                    "version": "KqlParameterItem/1.0",
                    "parameters": [
                      {
                        "id": "debf8921-313c-4d44-910e-bf15585440cd",
                        "version": "KqlParameterItem/1.0",
                        "name": "qlenThreshold",
                        "label": "QLen",
                        "type": 1,
                        "isRequired": true,
                        "query": "print dynamic(100);",
                        "typeSettings": {
                          "paramValidationRules": [
                            {
                              "regExp": "[^0-9]",
                              "match": false,
                              "message": "Not a positive integer"
                            }
                          ]
                        },
                        "timeContext": {
                          "durationMs": 7200000
                        },
                        "queryType": 0,
                        "resourceType": "microsoft.devices/iothubs"
                      },
                      {
                        "id": "4e1c32f9-0aaa-4678-b745-f292e1751993",
                        "version": "KqlParameterItem/1.0",
                        "name": "hostCpuPercentThreshold",
                        "label": "CPU (%)",
                        "type": 1,
                        "isRequired": true,
                        "query": "print dynamic(80);",
                        "typeSettings": {
                          "paramValidationRules": [
                            {
                              "regExp": "[^0-9]",
                              "match": false,
                              "message": "Not a positive integer"
                            },
                            {
                              "regExp": "[1-9]0[1-9]|[1-9]{2}\\d|[2-9]\\d{2}|\\d{4,}",
                              "match": false,
                              "message": "Must be between 0 - 100"
                            }
                          ]
                        },
                        "timeContext": {
                          "durationMs": 7200000
                        },
                        "queryType": 0,
                        "resourceType": "microsoft.devices/iothubs"
                      },
                      {
                        "id": "c4cc0d18-4fae-4639-bcf3-71ae674a7db4",
                        "version": "KqlParameterItem/1.0",
                        "name": "hostMemPercentThreshold",
                        "label": "Memory (%)",
                        "type": 1,
                        "isRequired": true,
                        "query": "print dynamic(80);",
                        "typeSettings": {
                          "paramValidationRules": [
                            {
                              "regExp": "[^0-9]",
                              "match": false,
                              "message": "Not a positive integer"
                            },
                            {
                              "regExp": "[1-9]0[1-9]|[1-9]{2}\\d|[2-9]\\d{2}|\\d{4,}",
                              "match": false,
                              "message": "Must be between 0 - 100"
                            }
                          ]
                        },
                        "timeContext": {
                          "durationMs": 7200000
                        },
                        "queryType": 0,
                        "resourceType": "microsoft.devices/iothubs"
                      },
                      {
                        "id": "1d855e64-5e59-4595-8493-93c2aae5e625",
                        "version": "KqlParameterItem/1.0",
                        "name": "hostDiskPercentThreshold",
                        "label": "Disk (%)",
                        "type": 1,
                        "isRequired": true,
                        "query": "print dynamic(90);",
                        "typeSettings": {
                          "paramValidationRules": [
                            {
                              "regExp": "[^0-9]",
                              "match": false,
                              "message": "Not a positive integer"
                            },
                            {
                              "regExp": " [1-9]0[1-9]|[1-9]{2}\\d|[2-9]\\d{2}|\\d{4,}",
                              "match": false,
                              "message": "Must be between 0 - 100"
                            }
                          ]
                        },
                        "timeContext": {
                          "durationMs": 7200000
                        },
                        "queryType": 0,
                        "resourceType": "microsoft.devices/iothubs"
                      },
                      {
                        "id": "7727ab38-dc51-415f-8d03-e8fb7fc3c775",
                        "version": "KqlParameterItem/1.0",
                        "name": "localMessagesSentThreshold",
                        "label": "Msgs sent (local)",
                        "type": 1,
                        "isRequired": true,
                        "query": "print dynamic(0);",
                        "typeSettings": {
                          "paramValidationRules": [
                            {
                              "regExp": "[^0-9]",
                              "match": false,
                              "message": "Not a positive integer"
                            }
                          ]
                        },
                        "timeContext": {
                          "durationMs": 7200000
                        },
                        "queryType": 0,
                        "resourceType": "microsoft.devices/iothubs"
                      },
                      {
                        "id": "34be45f4-87ac-4df1-92a1-6959e2875ff3",
                        "version": "KqlParameterItem/1.0",
                        "name": "upstreamMessagesSentThreshold",
                        "label": "Msgs sent (upstream)",
                        "type": 1,
                        "isRequired": true,
                        "query": "print dynamic(0);",
                        "typeSettings": {
                          "paramValidationRules": [
                            {
                              "regExp": "[^0-9]",
                              "match": false,
                              "message": "Not a positive integer"
                            }
                          ]
                        },
                        "timeContext": {
                          "durationMs": 7200000
                        },
                        "queryType": 0,
                        "resourceType": "microsoft.devices/iothubs"
                      },
                      {
                        "id": "d3501cb8-6dd6-4fdd-ab9b-954a5f937cf9",
                        "version": "KqlParameterItem/1.0",
                        "name": "firstPanicNoDataThresholdMins",
                        "label": "Warn: No data received (mins)",
                        "type": 1,
                        "isRequired": true,
                        "query": "print dynamic(30);",
                        "typeSettings": {
                          "paramValidationRules": [
                            {
                              "regExp": "[^0-9]",
                              "match": false,
                              "message": "Not a positive integer"
                            }
                          ]
                        },
                        "timeContext": {
                          "durationMs": 7200000
                        },
                        "queryType": 0,
                        "resourceType": "microsoft.devices/iothubs"
                      },
                      {
                        "id": "66e46f1a-c337-4edc-895e-485ac1fceb70",
                        "version": "KqlParameterItem/1.0",
                        "name": "secondPanicNoDataThresholdMins",
                        "label": "Error: No data received (mins)",
                        "type": 1,
                        "isRequired": true,
                        "query": "print 120;",
                        "typeSettings": {
                          "paramValidationRules": [
                            {
                              "regExp": "[^0-9]",
                              "match": false,
                              "message": "Not a positive integer"
                            }
                          ]
                        },
                        "timeContext": {
                          "durationMs": 7200000
                        },
                        "queryType": 0,
                        "resourceType": "microsoft.devices/iothubs"
                      }
                    ],
                    "style": "pills",
                    "queryType": 0,
                    "resourceType": "microsoft.devices/iothubs"
                  },
                  "name": "threshold parameters",
                  "styleSettings": {
                    "margin": "0px 0px 0px 12px"
                  }
                },
                {
                  "type": 1,
                  "content": {
                    "json": "_**Reset a threshold value to its original default by clicking the**_  â†»  _**icon that appears beside the header if the default has been changed.**_\r\n\r\nYou can enter _Edit_ mode for this workbook to modify and persist different default health thresholds.",
                    "style": "info"
                  },
                  "conditionalVisibility": {
                    "parameterName": "ShowTips",
                    "comparison": "isEqualTo",
                    "value": "true"
                  },
                  "name": "health parameters tip"
                }
              ],
              "exportParameters": true
            },
            "conditionalVisibility": {
              "parameterName": "showThresholds",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "threshold params group",
            "styleSettings": {
              "margin": "0px 0px 0px 8px"
            }
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "// Set thresholds based on workbook parameter values.\r\nlet hostMemPercentThreshold = toint({hostMemPercentThreshold}); // 80;\r\nlet hostCpuPercentThreshold = toint({hostCpuPercentThreshold}); // 80;\r\nlet hostDiskPercentThreshold = toint({hostDiskPercentThreshold}); // 90;\r\nlet localMessagesSentThreshold = toint({localMessagesSentThreshold}); // 0;\r\nlet upstreamMessagesSentThreshold = toint({upstreamMessagesSentThreshold}); // 0;\r\nlet qlenThreshold = toint({qlenThreshold}); // 100;\r\nlet firstPanicNoDataThresholdMins = toint({firstPanicNoDataThresholdMins}); // 30;\r\nlet secondPanicNoDataThresholdMins = max_of(firstPanicNoDataThresholdMins, toint({secondPanicNoDataThresholdMins})); // 120;\r\nlet startTime = {timeRange:start};\r\nlet endTime =  {timeRange:end};\r\nlet _data = InsightsMetrics\r\n    | where TimeGenerated between (startTime .. endTime) // restrict the time window\r\n    | extend iothub = extract(\"iothub.:.([^,]+).,\", 1, Tags, typeof(string))\r\n    | extend iothub = tostring(split(iothub, \".\")[0])\r\n    | extend device = strcat(iothub, \"/\", extract(\"edge_device.:.([^,]+).,\", 1, Tags, typeof(string)));\r\nlet _latestData = materialize(\r\n    _data\r\n    | summarize TimeGenerated = max(TimeGenerated)\r\n        by device, Name // restrict data to only the latest entries for each device and metric\r\n    | join kind=inner _data\r\n        on device, Name, TimeGenerated\r\n    | extend dimensions=parse_json(Tags) // expand the tags now that we have a reduced set\r\n    | extend scope = tostring(dimensions.module_name)\r\n    | extend quantile = todouble(dimensions.quantile)\r\n    | project TimeGenerated, dimensions, device, scope, quantile, Computer, Name, Val\r\n    );\r\n//\r\nlet cpu_and_mem = _latestData\r\n| where scope == \"host\" \r\n    and Name in (\"edgeAgent_total_memory_bytes\", \"edgeAgent_used_memory_bytes\", \"edgeAgent_used_cpu_percent\")\r\n| extend total_bytes = iif(Name == \"edgeAgent_total_memory_bytes\", tolong(Val), 0)\r\n| extend used_bytes = iif(Name == \"edgeAgent_used_memory_bytes\", tolong(Val), 0)\r\n| extend cpu = iif(Name == \"edgeAgent_used_cpu_percent\"\r\n     and quantile >= 0.99, toint(Val), 0)\r\n| partition hint.strategy=native by device (\r\n    summarize used_bytes=sum(used_bytes), total_bytes=sum(total_bytes), cpu=max(cpu)\r\n           by device, TimeGenerated\r\n    | order by TimeGenerated desc \r\n    | top 1 by device\r\n    )\r\n| summarize used_bytes=sum(used_bytes), totalMemByDevice=sum(total_bytes), p95HostCpu=max(cpu)\r\n         by device, TimeGenerated\r\n| extend p95HostMem = round(todouble(used_bytes) / todouble(totalMemByDevice) * 100, 0)\r\n| project device, p95HostCpu, p95HostMem;\r\n//\r\nlet used_disk_trend = _latestData\r\n    | where Name in (\"edgeAgent_total_disk_space_bytes\", \"edgeAgent_available_disk_space_bytes\")\r\n    | extend value = tolong(Val)\r\n    | extend diskname = tostring(dimensions.disk_name)\r\n    | extend diskfs = tostring(dimensions.disk_filesystem)\r\n    | where diskfs != \"overlay\"\r\n    | summarize Bytes=max(value)\r\n             by device, diskname, Name // order the relevant entries by device + disk\r\n    | order by diskname asc, Name asc\r\n    | extend values = pack(\"Name\", Name, \"Bytes\", Bytes) // pack the each name/value pair\r\n    | project-away Name, Bytes    \r\n    | summarize disksizes = make_list(values)\r\n             by device, diskname // collapse rows for each device + disk to make an array containing both avail and total byte values\r\n    | extend availBytes = disksizes[0].Bytes, // we packed entries alphabetically putting \"available\" before \"total\"\r\n             totalBytes = disksizes[1].Bytes  \r\n    | summarize p95Disk = round((sum(todouble(totalBytes)) - sum(todouble(availBytes))) / sum(todouble(totalBytes)) * 100, 0)\r\n             by device;\r\n//\r\nlet cpu_mem_disk = cpu_and_mem\r\n    | join used_disk_trend\r\n        on device\r\n    | project device, p95HostCpu, p95HostMem, p95Disk;\r\n//\r\nlet p95QlenByDevice = _latestData\r\n    | where Name == \"edgehub_queue_length\"\r\n    | extend ep = tostring(dimensions.endpoint)\r\n    | extend qlen = toint(Val)\r\n    | summarize sum_qlen = sum(qlen)\r\n             by device\r\n    | summarize p95QLen = max_of(0, max(sum_qlen))\r\n             by device;\r\n//\r\nlet lastUpdateTimeByDevice = _latestData\r\n    | where Name == \"edgehub_gettwin_total\"\r\n         or Name == \"edgeAgent_total_time_running_correctly_seconds\"\r\n    | summarize lastUpdateTime = max(TimeGenerated) \r\n             by device\r\n// BEGIN: test data generator\r\n    | extend lastUpdateTime = iif({genTestRows} > 0, iif(rand() > 0.7, datetime_add('minute', -tolong(rand(120)), lastUpdateTime), lastUpdateTime), lastUpdateTime) // add a random # of minutes about ~30% of the time\r\n// END: test data generator\r\n    | extend lastUpdatedMins    = tolong(datetime_diff('minute', now(), lastUpdateTime))\r\n    | project device, lastUpdatedMins;\r\n//\r\nlet qlenAndLastUpdate = lastUpdateTimeByDevice\r\n    | join kind=leftouter cpu_mem_disk\r\n        on device\r\n    | join kind=leftouter p95QlenByDevice \r\n        on device\r\n    | project-away device1, device2;\r\n// Local and upstream messages\r\n// TODO: Consider having the _latestData table contain the most recent 2 entries instead of only the latest\r\nlet recentMessageCount = _data // using our _data table here since it has more than the most recent entry\r\n    | where Name == \"edgehub_messages_sent_total\"\r\n    | project TimeGenerated, device, Val, Tags\r\n    | partition hint.strategy=native by device (\r\n        sort by device, TimeGenerated desc \r\n        | extend target = trim_start(@\"[^/]+/\", extract(\"to.:.([^,]+).,\", 1, Tags, typeof(string))) // using extract which is faster than extractjson\r\n        | extend isupstream = target has \"Upstream\"\r\n        | extend source = strcat(device, \"::\", trim_start(@\"[^/]+/\", extract(\"from.:.([^,]+).,\", 1, Tags, typeof(string))))\r\n        | extend sourceTarget = strcat(source, \"::\", target)\r\n        | summarize msgCounts = make_list(Val)\r\n                 by device, source, sourceTarget, isupstream\r\n    )\r\n    | extend diffs = series_subtract(msgCounts, array_shift_left(msgCounts, 1, toint(msgCounts[-1])))\r\n    | extend latestDiff = max_of(toint(diffs[0]), 0)\r\n    | summarize recentUpstreamMessages = sumif(latestDiff, isupstream),\r\n                totalUpstreamMessages = sumif(array_sum(diffs), isupstream),\r\n                recentLocalMessages = sumif(latestDiff, not(isupstream)),\r\n                totalLocalMessages = sumif(array_sum(diffs), not(isupstream))\r\n             by device;\r\n// Final join\r\nqlenAndLastUpdate\r\n| join kind=leftouter recentMessageCount\r\n    on device\r\n| project-away device1\r\n// BEGIN: test data generator\r\n| mv-expand with_itemindex=index range (1, {genTestRows}, 1)\r\n| extend device = iif({genTestRows} > 0, strcat(device, index), device),\r\n         p95HostCpu = iif({genTestRows} > 0, tolong(rand(100)), p95HostCpu), \r\n         p95HostMem = iif({genTestRows} > 0, toreal(rand(100)), p95HostMem), \r\n         p95Disk = iif({genTestRows} > 0, toreal(rand(100)), p95Disk),\r\n         recentLocalMessages = iif({genTestRows} > 0, tolong(rand(10000)), recentLocalMessages),\r\n         recentUpstreamMessages = iif({genTestRows} > 0, tolong(rand(10000)), recentUpstreamMessages),\r\n         totalLocalMessages = iif({genTestRows} > 0, toreal(rand(100000)), totalLocalMessages),\r\n         totalUpstreamMessages = iif({genTestRows} > 0, toreal(rand(100000)), totalUpstreamMessages)\r\n// END: test data generator\r\n| extend hostMemPercentThreshold = hostMemPercentThreshold,\r\n        hostCpuPercentThreshold = hostCpuPercentThreshold,\r\n        hostDiskPercentThreshold = hostDiskPercentThreshold,\r\n        localMessagesSentThreshold = localMessagesSentThreshold,\r\n        upstreamMessagesSentThreshold = upstreamMessagesSentThreshold,\r\n        qlenThreshold = qlenThreshold,\r\n        firstPanicNoDataThresholdMins = firstPanicNoDataThresholdMins,\r\n        secondPanicNoDataThresholdMins = secondPanicNoDataThresholdMins\r\n| extend healthIndicator = \r\n            iff((p95HostMem < hostMemPercentThreshold \r\n                and p95HostCpu < hostCpuPercentThreshold \r\n                and p95Disk < hostDiskPercentThreshold \r\n                and p95QLen < qlenThreshold),\r\n                iff(lastUpdatedMins < firstPanicNoDataThresholdMins, 0, 1),\r\n                2\r\n            )\r\n| extend healthIndicator = \r\n            iff(lastUpdatedMins > secondPanicNoDataThresholdMins,\r\n                1,\r\n                iff((isnull(p95HostMem) or p95HostMem < hostMemPercentThreshold) \r\n                    and (isnull(p95HostCpu) or p95HostCpu < hostCpuPercentThreshold)\r\n                    and (isnull(p95Disk) or p95Disk < hostDiskPercentThreshold)\r\n                    and (isnull(p95QLen) or p95QLen < qlenThreshold) \r\n                    and (recentLocalMessages >= localMessagesSentThreshold or localMessagesSentThreshold == 0)\r\n                    and (recentUpstreamMessages >= upstreamMessagesSentThreshold or upstreamMessagesSentThreshold == 0),\r\n                    0,\r\n                    2\r\n                )\r\n            )\r\n| extend statusHelper = \r\n    case(\r\n        lastUpdatedMins > secondPanicNoDataThresholdMins, -2,\r\n        lastUpdatedMins > firstPanicNoDataThresholdMins, -1,\r\n        healthIndicator\r\n    )\r\n| extend healthText = \r\n            case(\r\n                statusHelper == 0, \"Healthy\",\r\n                statusHelper == 1, \"Unhealthy\",\r\n                statusHelper == 2, \"Unhealthy\",\r\n                \"Unknown\"\r\n            )\r\n| union (datatable (healthText:string) [ \"Healthy\", \"Unhealthy\", \"Unknown\" ])\r\n| summarize Devices = countif(isnotempty(device)) by healthText\r\n| as T\r\n| extend PctDevices = strcat(\"(\", toint(100 * Devices / toscalar(T | summarize sum(Devices))), \"%)\")",
                    "size": 3,
                    "title": "Fleet Health Status",
                    "queryType": 0,
                    "resourceType": "microsoft.devices/iothubs",
                    "crossComponentResources": [
                      "{IoTHub}"
                    ],
                    "visualization": "tiles",
                    "tileSettings": {
                      "titleContent": {
                        "columnMatch": "healthText",
                        "formatter": 1,
                        "formatOptions": {
                          "compositeBarSettings": {
                            "labelText": "[\"healthText\"]",
                            "columnSettings": []
                          }
                        }
                      },
                      "subtitleContent": {
                        "columnMatch": "PctDevices",
                        "formatter": 1
                      },
                      "rightContent": {
                        "columnMatch": "Devices",
                        "formatter": 12,
                        "formatOptions": {
                          "palette": "none"
                        },
                        "numberFormat": {
                          "unit": 0,
                          "options": {
                            "style": "decimal",
                            "useGrouping": true
                          }
                        }
                      },
                      "secondaryContent": {
                        "columnMatch": "healthText",
                        "formatter": 18,
                        "formatOptions": {
                          "thresholdsOptions": "colors",
                          "thresholdsGrid": [
                            {
                              "operator": "==",
                              "thresholdValue": "Unhealthy",
                              "representation": "redBright",
                              "text": ""
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "Unknown",
                              "representation": "gray",
                              "text": ""
                            },
                            {
                              "operator": "Default",
                              "thresholdValue": null,
                              "representation": "green",
                              "text": ""
                            }
                          ]
                        }
                      },
                      "showBorder": true,
                      "rowLimit": 3,
                      "sortCriteriaField": "healthText",
                      "sortOrderField": 1
                    }
                  },
                  "customWidth": "0",
                  "name": "summary visualization",
                  "styleSettings": {
                    "margin": "0px"
                  }
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "title": "Summary Report",
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "// Set thresholds based on workbook parameter values.\r\nlet hostMemPercentThreshold = toint({hostMemPercentThreshold}); // 80;\r\nlet hostCpuPercentThreshold = toint({hostCpuPercentThreshold}); // 80;\r\nlet hostDiskPercentThreshold = toint({hostDiskPercentThreshold}); // 90;\r\nlet localMessagesSentThreshold = toint({localMessagesSentThreshold}); // 0;\r\nlet upstreamMessagesSentThreshold = toint({upstreamMessagesSentThreshold}); // 0;\r\nlet qlenThreshold = toint({qlenThreshold}); // 100;\r\nlet firstPanicNoDataThresholdMins = toint({firstPanicNoDataThresholdMins}); // 30;\r\nlet secondPanicNoDataThresholdMins = max_of(firstPanicNoDataThresholdMins, toint({secondPanicNoDataThresholdMins})); // 120;\r\nlet startTime = {timeRange:start};\r\nlet endTime =  {timeRange:end};\r\nlet _data = InsightsMetrics\r\n    | where TimeGenerated between (startTime .. endTime) // restrict the time window\r\n    | extend iothub = extract(\"iothub.:.([^,]+).,\", 1, Tags, typeof(string))\r\n    | extend iothub = tostring(split(iothub, \".\")[0])\r\n    | extend device = strcat(iothub, \"/\", extract(\"edge_device.:.([^,]+).,\", 1, Tags, typeof(string)));\r\nlet _latestData = materialize(\r\n    _data\r\n    | summarize TimeGenerated = max(TimeGenerated)\r\n        by device, Name // restrict data to only the latest entries for each device and metric\r\n    | join kind=inner _data\r\n        on device, Name, TimeGenerated\r\n    | extend dimensions=parse_json(Tags) // expand the tags now that we have a reduced set\r\n    | extend scope = tostring(dimensions.module_name)\r\n    | extend quantile = todouble(dimensions.quantile)\r\n    | project TimeGenerated, dimensions, device, scope, quantile, Computer, Name, Val\r\n    );\r\n//\r\nlet cpu_and_mem = _latestData\r\n| where scope == \"host\" \r\n    and Name in (\"edgeAgent_total_memory_bytes\", \"edgeAgent_used_memory_bytes\", \"edgeAgent_used_cpu_percent\")\r\n| extend total_bytes = iif(Name == \"edgeAgent_total_memory_bytes\", tolong(Val), 0)\r\n| extend used_bytes = iif(Name == \"edgeAgent_used_memory_bytes\", tolong(Val), 0)\r\n| extend cpu = iif(Name == \"edgeAgent_used_cpu_percent\"\r\n     and quantile >= 0.99, toint(Val), 0)\r\n| partition hint.strategy=native by device (\r\n    summarize used_bytes=sum(used_bytes), total_bytes=sum(total_bytes), cpu=max(cpu)\r\n           by device, TimeGenerated\r\n    | order by TimeGenerated desc \r\n    | top 1 by device\r\n    )\r\n| summarize used_bytes=sum(used_bytes), totalMemByDevice=sum(total_bytes), p95HostCpu=max(cpu)\r\n         by device, TimeGenerated\r\n| extend p95HostMem = round(todouble(used_bytes) / todouble(totalMemByDevice) * 100, 0)\r\n| project device, p95HostCpu, p95HostMem;\r\n//\r\nlet used_disk_trend = _latestData\r\n    | where Name in (\"edgeAgent_total_disk_space_bytes\", \"edgeAgent_available_disk_space_bytes\")\r\n    | extend value = tolong(Val)\r\n    | extend diskname = tostring(dimensions.disk_name)\r\n    | extend diskfs = tostring(dimensions.disk_filesystem)\r\n    | where diskfs != \"overlay\"\r\n    | summarize Bytes=max(value)\r\n             by device, diskname, Name // order the relevant entries by device + disk\r\n    | order by diskname asc, Name asc\r\n    | extend values = pack(\"Name\", Name, \"Bytes\", Bytes) // pack the each name/value pair\r\n    | project-away Name, Bytes    \r\n    | summarize disksizes = make_list(values)\r\n             by device, diskname // collapse rows for each device + disk to make an array containing both avail and total byte values\r\n    | extend availBytes = disksizes[0].Bytes, // we packed entries alphabetically putting \"available\" before \"total\"\r\n             totalBytes = disksizes[1].Bytes  \r\n    | summarize p95Disk = round((sum(todouble(totalBytes)) - sum(todouble(availBytes))) / sum(todouble(totalBytes)) * 100, 0)\r\n             by device;\r\n//\r\nlet cpu_mem_disk = cpu_and_mem\r\n    | join used_disk_trend\r\n        on device\r\n    | project device, p95HostCpu, p95HostMem, p95Disk;\r\n//\r\nlet p95QlenByDevice = _latestData\r\n    | where Name == \"edgehub_queue_length\"\r\n    | extend ep = tostring(dimensions.endpoint)\r\n    | extend qlen = toint(Val)\r\n    | summarize sum_qlen = sum(qlen)\r\n             by device\r\n    | summarize p95QLen = max_of(0, max(sum_qlen))\r\n             by device;\r\n//\r\nlet lastUpdateTimeByDevice = _latestData\r\n    | where Name == \"edgehub_gettwin_total\"\r\n         or Name == \"edgeAgent_total_time_running_correctly_seconds\"\r\n    | summarize lastUpdateTime = max(TimeGenerated) \r\n             by device\r\n// BEGIN: test data generator\r\n    | extend lastUpdateTime = iif({genTestRows} > 0, iif(rand() > 0.7, datetime_add('minute', -tolong(rand(120)), lastUpdateTime), lastUpdateTime), lastUpdateTime) // add a random # of minutes about ~30% of the time\r\n// END: test data generator\r\n    | extend lastUpdatedSeconds = tolong(datetime_diff('second', now(), lastUpdateTime))\r\n    | extend lastUpdatedMins    = tolong(datetime_diff('minute', now(), lastUpdateTime))\r\n    | extend lastUpdatedHours   = tolong(datetime_diff('hour', now(), lastUpdateTime))\r\n    | extend lastUpdatedDays    = tolong(datetime_diff('day', now(), lastUpdateTime))\r\n    | extend agoText = case(\r\n        lastUpdatedSeconds <= 60,    strcat(lastUpdatedSeconds, iff(lastUpdatedSeconds == 1, \" sec ago\", \" secs ago\")),\r\n        lastUpdatedSeconds <= 3600,  strcat(lastUpdatedMins,    iff(lastUpdatedMins    == 1,    \" min ago\", \" mins ago\")), \r\n        lastUpdatedSeconds <= 86400, strcat(lastUpdatedHours,   iff(lastUpdatedHours   == 1,   \" hr ago\",  \" hrs ago\")),\r\n        strcat(\"?? \", lastUpdatedDays, iff(lastUpdatedDays > 1, \" days ago\", \" day ago\")))\r\n    | project device, agoText, lastUpdatedMins;\r\n//\r\nlet qlenAndLastUpdate = lastUpdateTimeByDevice\r\n    | join kind=leftouter cpu_mem_disk\r\n        on device\r\n    | join kind=leftouter p95QlenByDevice \r\n        on device\r\n    | project-away device1, device2;\r\n// Local and upstream messages\r\n// TODO: Consider having the _latestData table contain the most recent 2 entries instead of only the latest\r\nlet recentMessageCount = _data // using our _data table here since it has more than the most recent entry\r\n    | where Name == \"edgehub_messages_sent_total\"\r\n    | project TimeGenerated, device, Val, Tags\r\n    | partition hint.strategy=native by device (\r\n        sort by device, TimeGenerated desc \r\n        | extend target = trim_start(@\"[^/]+/\", extract(\"to.:.([^,]+).,\", 1, Tags, typeof(string))) // using extract which is faster than extractjson\r\n        | extend isupstream = target has \"Upstream\"\r\n        | extend source = strcat(device, \"::\", trim_start(@\"[^/]+/\", extract(\"from.:.([^,]+).,\", 1, Tags, typeof(string))))\r\n        | extend sourceTarget = strcat(source, \"::\", target)\r\n        | summarize msgCounts = make_list(Val)\r\n                 by device, source, sourceTarget, isupstream\r\n    )\r\n    | extend diffs = series_subtract(msgCounts, array_shift_left(msgCounts, 1, toint(msgCounts[-1])))\r\n    | extend latestDiff = max_of(toint(diffs[0]), 0)\r\n    | summarize recentUpstreamMessages = sumif(latestDiff, isupstream),\r\n                totalUpstreamMessages = sumif(array_sum(diffs), isupstream),\r\n                recentLocalMessages = sumif(latestDiff, not(isupstream)),\r\n                totalLocalMessages = sumif(array_sum(diffs), not(isupstream))\r\n             by device;\r\n// Final join\r\nqlenAndLastUpdate\r\n| join kind=leftouter recentMessageCount\r\n    on device\r\n| project-away device1\r\n// BEGIN: test data generator\r\n| mv-expand with_itemindex=index range (1, {genTestRows}, 1)\r\n| extend device = iif({genTestRows} > 0, strcat(device, index), device),\r\n         p95HostCpu = iif({genTestRows} > 0, tolong(rand(100)), p95HostCpu), \r\n         p95HostMem = iif({genTestRows} > 0, toreal(rand(100)), p95HostMem), \r\n         p95Disk = iif({genTestRows} > 0, toreal(rand(100)), p95Disk),\r\n         recentLocalMessages = iif({genTestRows} > 0, tolong(rand(10000)), recentLocalMessages),\r\n         recentUpstreamMessages = iif({genTestRows} > 0, tolong(rand(10000)), recentUpstreamMessages),\r\n         totalLocalMessages = iif({genTestRows} > 0, toreal(rand(100000)), totalLocalMessages),\r\n         totalUpstreamMessages = iif({genTestRows} > 0, toreal(rand(100000)), totalUpstreamMessages)\r\n// END: test data generator\r\n| extend hostMemPercentThreshold = hostMemPercentThreshold,\r\n        hostCpuPercentThreshold = hostCpuPercentThreshold,\r\n        hostDiskPercentThreshold = hostDiskPercentThreshold,\r\n        localMessagesSentThreshold = localMessagesSentThreshold,\r\n        upstreamMessagesSentThreshold = upstreamMessagesSentThreshold,\r\n        qlenThreshold = qlenThreshold,\r\n        firstPanicNoDataThresholdMins = firstPanicNoDataThresholdMins,\r\n        secondPanicNoDataThresholdMins = secondPanicNoDataThresholdMins\r\n| extend healthIndicator = \r\n            iff((p95HostMem < hostMemPercentThreshold \r\n                and p95HostCpu < hostCpuPercentThreshold \r\n                and p95Disk < hostDiskPercentThreshold \r\n                and p95QLen < qlenThreshold),\r\n                iff(lastUpdatedMins < firstPanicNoDataThresholdMins, 0, 1),\r\n                2\r\n            )\r\n| extend healthIndicator = \r\n            iff(lastUpdatedMins > secondPanicNoDataThresholdMins,\r\n                1,\r\n                iff((isnull(p95HostMem) or p95HostMem < hostMemPercentThreshold) \r\n                    and (isnull(p95HostCpu) or p95HostCpu < hostCpuPercentThreshold)\r\n                    and (isnull(p95Disk) or p95Disk < hostDiskPercentThreshold)\r\n                    and (isnull(p95QLen) or p95QLen < qlenThreshold) \r\n                    and (recentLocalMessages >= localMessagesSentThreshold or localMessagesSentThreshold == 0)\r\n                    and (recentUpstreamMessages >= upstreamMessagesSentThreshold or upstreamMessagesSentThreshold == 0),\r\n                    0,\r\n                    2\r\n                )\r\n            )\r\n| extend statusHelper = \r\n    case(\r\n        lastUpdatedMins > secondPanicNoDataThresholdMins, -2,\r\n        lastUpdatedMins > firstPanicNoDataThresholdMins, -1,\r\n        healthIndicator\r\n    )\r\n| extend healthText = \r\n            case(\r\n                statusHelper == 0, \"Healthy\",\r\n                statusHelper == 1, \"Unhealthy\",\r\n                statusHelper == 2, \"Unhealthy\",\r\n                \"Unknown\"\r\n            )\r\n| summarize Devices = countif(isnotempty(device)), \r\n            HighCPU = countif(p95HostCpu >= hostCpuPercentThreshold), \r\n            HighMem = countif(p95HostMem >= hostMemPercentThreshold), \r\n            HighDisk = countif(p95Disk >= hostDiskPercentThreshold),\r\n            HighQLen = countif(p95QLen >= qlenThreshold),\r\n            FirstPanicNoData = countif(lastUpdatedMins between (firstPanicNoDataThresholdMins .. secondPanicNoDataThresholdMins)),\r\n            SecondPanicNoData = countif(lastUpdatedMins >= secondPanicNoDataThresholdMins)",
                          "size": 4,
                          "title": "Health Summary Text - Base Query",
                          "timeContext": {
                            "durationMs": 0
                          },
                          "timeContextFromParameter": "timeRange",
                          "queryType": 0,
                          "resourceType": "microsoft.devices/iothubs",
                          "crossComponentResources": [
                            "{IoTHub}"
                          ],
                          "gridSettings": {
                            "rowLimit": 5
                          }
                        },
                        "conditionalVisibility": {
                          "parameterName": "ShowHealthSummaryBaseQuery",
                          "comparison": "isEqualTo",
                          "value": "true"
                        },
                        "name": "health summary text - base query"
                      },
                      {
                        "type": 9,
                        "content": {
                          "version": "KqlParameterItem/1.0",
                          "parameters": [
                            {
                              "id": "ee9868ed-a8f5-44a2-b205-1a8fd7f97af8",
                              "version": "KqlParameterItem/1.0",
                              "name": "NumDevicesHighQLen",
                              "type": 1,
                              "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"4dce97cd-216c-49c7-ac15-4eaf8e80a1a6\",\"mergeType\":\"table\",\"leftTable\":\"health summary text - base query\"}],\"projectRename\":[{\"originalName\":\"[health summary text - base query].HighQLen\",\"mergedName\":\"HighQLen\",\"fromId\":\"4dce97cd-216c-49c7-ac15-4eaf8e80a1a6\"},{\"originalName\":\"[health summary text - base query].Devices\"},{\"originalName\":\"[health summary text - base query].HighCPU\"},{\"originalName\":\"[health summary text - base query].HighMem\"},{\"originalName\":\"[health summary text - base query].HighDisk\"},{\"originalName\":\"[health summary text - base query].FirstPanicNoData\"},{\"originalName\":\"[health summary text - base query].SecondPanicNoData\"}]}",
                              "isHiddenWhenLocked": true,
                              "timeContext": {
                                "durationMs": 7200000
                              },
                              "queryType": 7
                            },
                            {
                              "id": "8e775c50-ee8c-4108-ba2b-781deda70177",
                              "version": "KqlParameterItem/1.0",
                              "name": "NumDevicesHighCPU",
                              "type": 1,
                              "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"4dce97cd-216c-49c7-ac15-4eaf8e80a196\",\"mergeType\":\"table\",\"leftTable\":\"health summary text - base query\"}],\"projectRename\":[{\"originalName\":\"[health summary text - base query].HighCPU\",\"mergedName\":\"HighCPU\",\"fromId\":\"4dce97cd-216c-49c7-ac15-4eaf8e80a196\"},{\"originalName\":\"[health summary text - base query].Devices\"},{\"originalName\":\"[health summary text - base query].HighMem\"},{\"originalName\":\"[health summary text - base query].HighDisk\"},{\"originalName\":\"[health summary text - base query].HighQLen\"},{\"originalName\":\"[health summary text - base query].FirstPanicNoData\"},{\"originalName\":\"[health summary text - base query].SecondPanicNoData\"}]}",
                              "isHiddenWhenLocked": true,
                              "timeContext": {
                                "durationMs": 7200000
                              },
                              "queryType": 7
                            },
                            {
                              "id": "6ebf7ab9-f90f-4173-bbfe-8c1c5c7657e9",
                              "version": "KqlParameterItem/1.0",
                              "name": "NumDevicesHighMem",
                              "type": 1,
                              "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"4dce97cd-216c-49c7-ac15-4eaf8e80a19e\",\"mergeType\":\"table\",\"leftTable\":\"health summary text - base query\"}],\"projectRename\":[{\"originalName\":\"[health summary text - base query].HighMem\",\"mergedName\":\"HighMem\",\"fromId\":\"4dce97cd-216c-49c7-ac15-4eaf8e80a19e\"},{\"originalName\":\"[health summary text - base query].Devices\"},{\"originalName\":\"[health summary text - base query].HighCPU\"},{\"originalName\":\"[health summary text - base query].HighDisk\"},{\"originalName\":\"[health summary text - base query].HighQLen\"},{\"originalName\":\"[health summary text - base query].FirstPanicNoData\"},{\"originalName\":\"[health summary text - base query].SecondPanicNoData\"}]}",
                              "isHiddenWhenLocked": true,
                              "timeContext": {
                                "durationMs": 7200000
                              },
                              "queryType": 7
                            },
                            {
                              "id": "9cd1e965-32fb-48e1-a8d7-2b715b69b0d7",
                              "version": "KqlParameterItem/1.0",
                              "name": "NumDevicesHighDisk",
                              "type": 1,
                              "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"4dce97cd-216c-49c7-ac15-4eaf8e80a1a0\",\"mergeType\":\"table\",\"leftTable\":\"health summary text - base query\"}],\"projectRename\":[{\"originalName\":\"[health summary text - base query].HighDisk\",\"mergedName\":\"HighDisk\",\"fromId\":\"4dce97cd-216c-49c7-ac15-4eaf8e80a1a0\"},{\"originalName\":\"[health summary text - base query].Devices\"},{\"originalName\":\"[health summary text - base query].HighCPU\"},{\"originalName\":\"[health summary text - base query].HighMem\"},{\"originalName\":\"[health summary text - base query].HighQLen\"},{\"originalName\":\"[health summary text - base query].FirstPanicNoData\"},{\"originalName\":\"[health summary text - base query].SecondPanicNoData\"}]}",
                              "isHiddenWhenLocked": true,
                              "timeContext": {
                                "durationMs": 7200000
                              },
                              "queryType": 7
                            },
                            {
                              "id": "d4492440-1a06-493b-9d75-c23264ab2ee6",
                              "version": "KqlParameterItem/1.0",
                              "name": "NumDevicesFirstPanicNoData",
                              "type": 1,
                              "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"4dce97cd-216c-49c7-ac15-4eaf8e80a1a2\",\"mergeType\":\"table\",\"leftTable\":\"health summary text - base query\"}],\"projectRename\":[{\"originalName\":\"[health summary text - base query].FirstPanicNoData\",\"mergedName\":\"FirstPanicNoData\",\"fromId\":\"4dce97cd-216c-49c7-ac15-4eaf8e80a1a2\"},{\"originalName\":\"[health summary text - base query].Devices\"},{\"originalName\":\"[health summary text - base query].HighCPU\"},{\"originalName\":\"[health summary text - base query].HighMem\"},{\"originalName\":\"[health summary text - base query].HighDisk\"},{\"originalName\":\"[health summary text - base query].HighQLen\"},{\"originalName\":\"[health summary text - base query].SecondPanicNoData\"}]}",
                              "isHiddenWhenLocked": true,
                              "timeContext": {
                                "durationMs": 7200000
                              },
                              "queryType": 7
                            },
                            {
                              "id": "8dbb3665-31ad-45fa-90fa-eec6d98916cf",
                              "version": "KqlParameterItem/1.0",
                              "name": "NumDevicesSecondPanicNoData",
                              "type": 1,
                              "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"4dce97cd-216c-49c7-ac15-4eaf8e80a1a4\",\"mergeType\":\"table\",\"leftTable\":\"health summary text - base query\"}],\"projectRename\":[{\"originalName\":\"[health summary text - base query].SecondPanicNoData\",\"mergedName\":\"SecondPanicNoData\",\"fromId\":\"4dce97cd-216c-49c7-ac15-4eaf8e80a1a4\"},{\"originalName\":\"[health summary text - base query].HighMem\"},{\"originalName\":\"[health summary text - base query].HighDisk\"},{\"originalName\":\"[health summary text - base query].Devices\"},{\"originalName\":\"[health summary text - base query].HighCPU\"},{\"originalName\":\"[health summary text - base query].HighQLen\"},{\"originalName\":\"[health summary text - base query].FirstPanicNoData\"}]}",
                              "isHiddenWhenLocked": true,
                              "timeContext": {
                                "durationMs": 7200000
                              },
                              "queryType": 7
                            }
                          ],
                          "style": "pills",
                          "queryType": 7
                        },
                        "name": "Health Summary Text Parameters"
                      },
                      {
                        "type": 1,
                        "content": {
                          "json": "** {NumDevicesHighQLen} ** device(s) reporting **high queue length** (>= {qlenThreshold})"
                        },
                        "conditionalVisibility": {
                          "parameterName": "NumDevicesHighQLen",
                          "comparison": "isNotEqualTo",
                          "value": ""
                        },
                        "name": "high Q length summary"
                      },
                      {
                        "type": 1,
                        "content": {
                          "json": "** {NumDevicesHighCPU} ** device(s) reporting **high CPU usage** (>= {hostCpuPercentThreshold}%)"
                        },
                        "conditionalVisibility": {
                          "parameterName": "NumDevicesHighCPU",
                          "comparison": "isNotEqualTo",
                          "value": null
                        },
                        "name": "high CPU summary"
                      },
                      {
                        "type": 1,
                        "content": {
                          "json": "** {NumDevicesHighMem} ** device(s) reporting **high memory usage** (>= {hostMemPercentThreshold}%)"
                        },
                        "conditionalVisibility": {
                          "parameterName": "NumDevicesHighMem",
                          "comparison": "isNotEqualTo",
                          "value": null
                        },
                        "name": "high memory summary"
                      },
                      {
                        "type": 1,
                        "content": {
                          "json": "** {NumDevicesHighDisk} ** device(s) reporting **high disk usage** (>= {hostDiskPercentThreshold}%)"
                        },
                        "conditionalVisibility": {
                          "parameterName": "NumDevicesHighDisk",
                          "comparison": "isNotEqualTo",
                          "value": null
                        },
                        "name": "high disk summary"
                      },
                      {
                        "type": 1,
                        "content": {
                          "json": "** {NumDevicesFirstPanicNoData} ** device(s) **has not been seen in over {firstPanicNoDataThresholdMins} mins** (warning)"
                        },
                        "conditionalVisibility": {
                          "parameterName": "NumDevicesFirstPanicNoData",
                          "comparison": "isNotEqualTo",
                          "value": null
                        },
                        "name": "first panic summary"
                      },
                      {
                        "type": 1,
                        "content": {
                          "json": "** {NumDevicesSecondPanicNoData} ** device(s) **has not been seen in over {secondPanicNoDataThresholdMins} mins**"
                        },
                        "conditionalVisibility": {
                          "parameterName": "NumDevicesSecondPanicNoData",
                          "comparison": "isNotEqualTo",
                          "value": null
                        },
                        "name": "second panic summary"
                      },
                      {
                        "type": 1,
                        "content": {
                          "json": "All devices appear to be healthy!"
                        },
                        "conditionalVisibilities": [
                          {
                            "parameterName": "NumDevicesHighQLen",
                            "comparison": "isEqualTo"
                          },
                          {
                            "parameterName": "NumDevicesHighCPU",
                            "comparison": "isEqualTo"
                          },
                          {
                            "parameterName": "NumDevicesHighMem",
                            "comparison": "isEqualTo"
                          },
                          {
                            "parameterName": "NumDevicesHighDisk",
                            "comparison": "isEqualTo"
                          },
                          {
                            "parameterName": "NumDevicesFirstPanicNoData",
                            "comparison": "isEqualTo"
                          },
                          {
                            "parameterName": "NumDevicesSecondPanicNoData",
                            "comparison": "isEqualTo"
                          }
                        ],
                        "name": "all OK"
                      }
                    ]
                  },
                  "customWidth": "0",
                  "name": "fleet summary text",
                  "styleSettings": {
                    "margin": "0px 8px 8px 32px",
                    "padding": "0px"
                  }
                }
              ]
            },
            "name": "fleet summary group"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "loadType": "explicit",
              "loadButtonText": "Details",
              "items": [
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "title": "Filters",
                    "items": [
                      {
                        "type": 9,
                        "content": {
                          "version": "KqlParameterItem/1.0",
                          "parameters": [
                            {
                              "id": "26af5775-3dba-4947-b12b-f1356a3ee67d",
                              "version": "KqlParameterItem/1.0",
                              "name": "healthStatus",
                              "label": "Health Status",
                              "type": 2,
                              "isRequired": true,
                              "multiSelect": true,
                              "quote": "'",
                              "delimiter": ",",
                              "value": [
                                "Unhealthy",
                                "Unknown"
                              ],
                              "typeSettings": {
                                "additionalResourceOptions": [],
                                "showDefault": false
                              },
                              "jsonData": "[\r\n    { \"value\" : \"Healthy\", \"label\" : \"Healthy\" },\r\n    { \"value\" : \"Unhealthy\", \"label\" : \"Unhealthy\", \"selected\" : true },\r\n    { \"value\" : \"Unknown\", \"label\" : \"Unknown\", \"selected\" : true }\r\n]",
                              "timeContext": {
                                "durationMs": 7200000
                              }
                            },
                            {
                              "id": "a4fe1e43-0c9e-4368-82a0-6800438bca8e",
                              "version": "KqlParameterItem/1.0",
                              "name": "minLastSeen",
                              "label": "Last seen >= (mins)",
                              "type": 2,
                              "isRequired": true,
                              "typeSettings": {
                                "additionalResourceOptions": [],
                                "showDefault": false
                              },
                              "jsonData": "[\r\n    { \"value\" : \"0\", \"label\" : \"Any\", \"selected\" : true },\r\n    { \"value\" : \"1\", \"label\" : \"1 min\" },\r\n    { \"value\" : 5, \"label\" : \"5 mins\" },\r\n    { \"value\" : 60, \"label\" : \"1 hr\" },\r\n    { \"value\" : 120, \"label\" : \"2 hrs\" },\r\n    { \"value\" : 240, \"label\" : \"4 hrs\" },\r\n    { \"value\" : 480, \"label\" : \"8 hrs\" },\r\n    { \"value\" : 1440, \"label\" : \"1 day\" },\r\n    { \"value\" : 2880, \"label\" : \"2 days\" },\r\n    { \"value\" : 10080, \"label\" : \"1 week\" }\r\n]",
                              "timeContext": {
                                "durationMs": 7200000
                              }
                            },
                            {
                              "id": "eb232a4c-f8b6-4734-92f4-ac2e5e1bb096",
                              "version": "KqlParameterItem/1.0",
                              "name": "minQLen",
                              "label": "QLen >= (#)",
                              "type": 1,
                              "isRequired": true,
                              "query": "print dynamic(0);",
                              "typeSettings": {
                                "paramValidationRules": [
                                  {
                                    "regExp": "[^0-9]",
                                    "match": false,
                                    "message": "Not a positive integer"
                                  }
                                ]
                              },
                              "timeContext": {
                                "durationMs": 7200000
                              },
                              "queryType": 0,
                              "resourceType": "microsoft.devices/iothubs"
                            },
                            {
                              "id": "60ffd2b5-3c70-4dff-9690-645879a77a3d",
                              "version": "KqlParameterItem/1.0",
                              "name": "minCpu",
                              "label": "CPU >= (%)",
                              "type": 1,
                              "isRequired": true,
                              "query": "print dynamic(0);",
                              "typeSettings": {
                                "paramValidationRules": [
                                  {
                                    "regExp": "[^0-9]",
                                    "match": false,
                                    "message": "Not a positive integer"
                                  },
                                  {
                                    "regExp": "[1-9]0[1-9]|[1-9]{2}\\d|[2-9]\\d{2}|\\d{4,}",
                                    "match": false,
                                    "message": "Must be between 0 - 100"
                                  }
                                ]
                              },
                              "timeContext": {
                                "durationMs": 7200000
                              },
                              "queryType": 0,
                              "resourceType": "microsoft.devices/iothubs"
                            },
                            {
                              "id": "03f75ae1-0f94-45d4-985b-cb518303f184",
                              "version": "KqlParameterItem/1.0",
                              "name": "minMem",
                              "label": "Memory >= (%)",
                              "type": 1,
                              "isRequired": true,
                              "query": "print dynamic(0);",
                              "typeSettings": {
                                "paramValidationRules": [
                                  {
                                    "regExp": "[^0-9]",
                                    "match": false,
                                    "message": "Not a positive integer"
                                  },
                                  {
                                    "regExp": "[1-9]0[1-9]|[1-9]{2}\\d|[2-9]\\d{2}|\\d{4,}",
                                    "match": false,
                                    "message": "Must be between 0 - 100"
                                  }
                                ]
                              },
                              "timeContext": {
                                "durationMs": 7200000
                              },
                              "queryType": 0,
                              "resourceType": "microsoft.devices/iothubs"
                            },
                            {
                              "id": "6dbef618-2d8c-401e-840b-17683610312d",
                              "version": "KqlParameterItem/1.0",
                              "name": "minDisk",
                              "label": "Disk >= (%)",
                              "type": 1,
                              "isRequired": true,
                              "query": "print dynamic(0);",
                              "typeSettings": {
                                "paramValidationRules": [
                                  {
                                    "regExp": "[^0-9]",
                                    "match": false,
                                    "message": "Not a positive integer"
                                  },
                                  {
                                    "regExp": "[1-9]0[1-9]|[1-9]{2}\\d|[2-9]\\d{2}|\\d{4,}",
                                    "match": false,
                                    "message": "Must be between 0 - 100"
                                  }
                                ]
                              },
                              "timeContext": {
                                "durationMs": 7200000
                              },
                              "queryType": 0,
                              "resourceType": "microsoft.devices/iothubs"
                            }
                          ],
                          "style": "above",
                          "queryType": 0,
                          "resourceType": "microsoft.devices/iothubs"
                        },
                        "name": "Datatable Filters",
                        "styleSettings": {
                          "margin": "0px 0px 0px 12px"
                        }
                      }
                    ],
                    "exportParameters": true
                  },
                  "name": "filter group",
                  "styleSettings": {
                    "margin": "0px 0px 0px 12px",
                    "padding": "0px 0px 0px 0px"
                  }
                },
                {
                  "type": 1,
                  "content": {
                    "json": "Click the device _Name_ to see device details.  Click the device _Status_ to see a snapshot of health metrics.\r\n\r\nWhen a device is _Unhealthy_ an arrow icon will appear beside the number in each column that has surpassed its expected threshold value.\r\n",
                    "style": "info"
                  },
                  "conditionalVisibilities": [
                    {
                      "parameterName": "ShowTips",
                      "comparison": "isEqualTo",
                      "value": "true"
                    },
                    {
                      "parameterName": "InsightsMetricsExist",
                      "comparison": "isEqualTo",
                      "value": "yes"
                    }
                  ],
                  "name": "device-list-main-tip",
                  "styleSettings": {
                    "padding": "12px 0px 0px 0px"
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "// Set thresholds based on workbook parameter values.\nlet hostMemPercentThreshold = toint({hostMemPercentThreshold}); // 80;\nlet hostCpuPercentThreshold = toint({hostCpuPercentThreshold}); // 80;\nlet hostDiskPercentThreshold = toint({hostDiskPercentThreshold}); // 90;\nlet localMessagesSentThreshold = toint({localMessagesSentThreshold}); // 0;\nlet upstreamMessagesSentThreshold = toint({upstreamMessagesSentThreshold}); // 0;\nlet qlenThreshold = toint({qlenThreshold}); // 100;\nlet firstPanicNoDataThresholdMins = toint({firstPanicNoDataThresholdMins}); // 30;\nlet secondPanicNoDataThresholdMins = max_of(firstPanicNoDataThresholdMins, toint({secondPanicNoDataThresholdMins})); // 120;\nlet startTime = {timeRange:start};\nlet endTime =  {timeRange:end};\nlet _data = InsightsMetrics\n    | where TimeGenerated between (startTime .. endTime) // restrict the time window\n    | extend iothub = extract(\"iothub.:.([^,]+).,\", 1, Tags, typeof(string))\n    | extend iothub = tostring(split(iothub, \".\")[0])\n    | extend device = strcat(iothub, \"/\", extract(\"edge_device.:.([^,]+).,\", 1, Tags, typeof(string)));\nlet _latestData = materialize(\n    _data\n    | summarize TimeGenerated = max(TimeGenerated)\n        by device, Name // restrict data to only the latest entries for each device and metric\n    | join kind=inner _data\n        on device, Name, TimeGenerated\n    | extend dimensions=parse_json(Tags) // expand the tags now that we have a reduced set\n    | extend scope = tostring(dimensions.module_name)\n    | extend quantile = todouble(dimensions.quantile)\n    | project TimeGenerated, dimensions, device, scope, quantile, Computer, Name, Val\n    );\n//\nlet cpu_and_mem = _latestData\n| where scope == \"host\" \n    and Name in (\"edgeAgent_total_memory_bytes\", \"edgeAgent_used_memory_bytes\", \"edgeAgent_used_cpu_percent\")\n| extend total_bytes = iif(Name == \"edgeAgent_total_memory_bytes\", tolong(Val), 0)\n| extend used_bytes = iif(Name == \"edgeAgent_used_memory_bytes\", tolong(Val), 0)\n| extend cpu = iif(Name == \"edgeAgent_used_cpu_percent\"\n     and quantile >= 0.99, toint(Val), 0)\n| partition hint.strategy=native by device (\n    summarize used_bytes=sum(used_bytes), total_bytes=sum(total_bytes), cpu=max(cpu)\n           by device, TimeGenerated\n    | order by TimeGenerated desc \n    | top 1 by device\n    )\n| summarize used_bytes=sum(used_bytes), totalMemByDevice=sum(total_bytes), p95HostCpu=max(cpu)\n         by device, TimeGenerated\n| extend p95HostMem = round(todouble(used_bytes) / todouble(totalMemByDevice) * 100, 0)\n| project device, p95HostCpu, p95HostMem;\n//\nlet used_disk_trend = _latestData\n    | where Name in (\"edgeAgent_total_disk_space_bytes\", \"edgeAgent_available_disk_space_bytes\")\n    | extend value = tolong(Val)\n    | extend diskname = tostring(dimensions.disk_name)\n    | extend diskfs = tostring(dimensions.disk_filesystem)\n    | where diskfs != \"overlay\"\n    | summarize Bytes=max(value)\n             by device, diskname, Name // order the relevant entries by device + disk\n    | order by diskname asc, Name asc\n    | extend values = pack(\"Name\", Name, \"Bytes\", Bytes) // pack the each name/value pair\n    | project-away Name, Bytes    \n    | summarize disksizes = make_list(values)\n             by device, diskname // collapse rows for each device + disk to make an array containing both avail and total byte values\n    | extend availBytes = disksizes[0].Bytes, // we packed entries alphabetically putting \"available\" before \"total\"\n             totalBytes = disksizes[1].Bytes  \n    | summarize p95Disk = round((sum(todouble(totalBytes)) - sum(todouble(availBytes))) / sum(todouble(totalBytes)) * 100, 0)\n             by device;\n//\nlet cpu_mem_disk = cpu_and_mem\n    | join used_disk_trend\n        on device\n    | project device, p95HostCpu, p95HostMem, p95Disk;\n//\nlet p95QlenByDevice = _latestData\n    | where Name == \"edgehub_queue_length\"\n    | extend ep = tostring(dimensions.endpoint)\n    | extend qlen = toint(Val)\n    | summarize sum_qlen = sum(qlen)\n             by device\n    | summarize p95QLen = max_of(0, max(sum_qlen))\n             by device;\n//\nlet lastUpdateTimeByDevice = _latestData\n    | where Name == \"edgehub_gettwin_total\"\n         or Name == \"edgeAgent_total_time_running_correctly_seconds\"\n    | summarize lastUpdateTime = max(TimeGenerated) \n             by device\n// BEGIN: test data generator\n    | extend lastUpdateTime = iif({genTestRows} > 0, iif(rand() > 0.7, datetime_add('minute', -tolong(rand(120)), lastUpdateTime), lastUpdateTime), lastUpdateTime) // add a random # of minutes about ~30% of the time\n// END: test data generator\n    | extend lastUpdatedSeconds = tolong(datetime_diff('second', now(), lastUpdateTime))\n    | extend lastUpdatedMins    = tolong(datetime_diff('minute', now(), lastUpdateTime))\n    | extend lastUpdatedHours   = tolong(datetime_diff('hour', now(), lastUpdateTime))\n    | extend lastUpdatedDays    = tolong(datetime_diff('day', now(), lastUpdateTime))\n    | extend agoText = case(\n        lastUpdatedSeconds <= 60,    strcat(lastUpdatedSeconds, iff(lastUpdatedSeconds == 1, \" sec ago\", \" secs ago\")),\n        lastUpdatedSeconds <= 3600,  strcat(lastUpdatedMins,    iff(lastUpdatedMins    == 1,    \" min ago\", \" mins ago\")), \n        lastUpdatedSeconds <= 86400, strcat(lastUpdatedHours,   iff(lastUpdatedHours   == 1,   \" hr ago\",  \" hrs ago\")),\n        strcat(\"ðŸ‘€ \", lastUpdatedDays, iff(lastUpdatedDays > 1, \" days ago\", \" day ago\")))\n    | project device, agoText, lastUpdatedMins;\n//\nlet qlenAndLastUpdate = lastUpdateTimeByDevice\n    | join kind=leftouter cpu_mem_disk\n        on device\n    | join kind=leftouter p95QlenByDevice \n        on device\n    | project-away device1, device2;\n// Local and upstream messages\n// TODO: Consider having the _latestData table contain the most recent 2 entries instead of only the latest\nlet recentMessageCount = _data // using our _data table here since it has more than the most recent entry\n    | where Name == \"edgehub_messages_sent_total\"\n    | project TimeGenerated, device, Val, Tags\n    | partition hint.strategy=native by device (\n        sort by device, TimeGenerated desc \n        | extend target = trim_start(@\"[^/]+/\", extract(\"to.:.([^,]+).,\", 1, Tags, typeof(string))) // using extract which is faster than extractjson\n        | extend isupstream = target has \"Upstream\"\n        | extend source = strcat(device, \"::\", trim_start(@\"[^/]+/\", extract(\"from.:.([^,]+).,\", 1, Tags, typeof(string))))\n        | extend sourceTarget = strcat(source, \"::\", target)\n        | summarize msgCounts = make_list(Val)\n                 by device, source, sourceTarget, isupstream\n    )\n    | extend diffs = series_subtract(msgCounts, array_shift_left(msgCounts, 1, toint(msgCounts[-1])))\n    | extend latestDiff = max_of(toint(diffs[0]), 0)\n    | summarize recentUpstreamMessages = sumif(latestDiff, isupstream),\n                totalUpstreamMessages = sumif(array_sum(diffs), isupstream),\n                recentLocalMessages = sumif(latestDiff, not(isupstream)),\n                totalLocalMessages = sumif(array_sum(diffs), not(isupstream))\n             by device;\n// Final join\nqlenAndLastUpdate\n| join kind=leftouter recentMessageCount\n    on device\n| project-away device1\n// BEGIN: test data generator\n| mv-expand with_itemindex=index range (1, {genTestRows}, 1)\n| extend device = iif({genTestRows} > 0, strcat(device, index), device),\n         p95HostCpu = iif({genTestRows} > 0, tolong(rand(100)), p95HostCpu), \n         p95HostMem = iif({genTestRows} > 0, toreal(rand(100)), p95HostMem), \n         p95Disk = iif({genTestRows} > 0, toreal(rand(100)), p95Disk),\n         recentLocalMessages = iif({genTestRows} > 0, tolong(rand(10000)), recentLocalMessages),\n         recentUpstreamMessages = iif({genTestRows} > 0, tolong(rand(10000)), recentUpstreamMessages),\n         totalLocalMessages = iif({genTestRows} > 0, toreal(rand(100000)), totalLocalMessages),\n         totalUpstreamMessages = iif({genTestRows} > 0, toreal(rand(100000)), totalUpstreamMessages)\n// END: test data generator\n| extend hostMemPercentThreshold = hostMemPercentThreshold,\n        hostCpuPercentThreshold = hostCpuPercentThreshold,\n        hostDiskPercentThreshold = hostDiskPercentThreshold,\n        localMessagesSentThreshold = localMessagesSentThreshold,\n        upstreamMessagesSentThreshold = upstreamMessagesSentThreshold,\n        qlenThreshold = qlenThreshold,\n        firstPanicNoDataThresholdMins = firstPanicNoDataThresholdMins,\n        secondPanicNoDataThresholdMins = secondPanicNoDataThresholdMins\n| extend healthIndicator = \n            iff((p95HostMem < hostMemPercentThreshold \n                and p95HostCpu < hostCpuPercentThreshold \n                and p95Disk < hostDiskPercentThreshold \n                and p95QLen < qlenThreshold),\n                iff(lastUpdatedMins < firstPanicNoDataThresholdMins, 0, 1),\n                2\n            )\n| extend healthIndicator = \n            iff(lastUpdatedMins > secondPanicNoDataThresholdMins,\n                1,\n                iff((isnull(p95HostMem) or p95HostMem < hostMemPercentThreshold) \n                    and (isnull(p95HostCpu) or p95HostCpu < hostCpuPercentThreshold)\n                    and (isnull(p95Disk) or p95Disk < hostDiskPercentThreshold)\n                    and (isnull(p95QLen) or p95QLen < qlenThreshold) \n                    and (recentLocalMessages >= localMessagesSentThreshold or localMessagesSentThreshold == 0)\n                    and (recentUpstreamMessages >= upstreamMessagesSentThreshold or upstreamMessagesSentThreshold == 0),\n                    0,\n                    2\n                )\n            )\n| extend statusHelper = \n    case(\n        lastUpdatedMins > secondPanicNoDataThresholdMins, -2,\n        lastUpdatedMins > firstPanicNoDataThresholdMins, -1,\n        healthIndicator\n    )\n| extend healthText = \n            case(\n                statusHelper == 0, \"Healthy\",\n                statusHelper == 1, \"Unhealthy\",\n                statusHelper == 2, \"Unhealthy\",\n                \"Unknown\"\n            )\n| where healthText in ({healthStatus})\n    and p95HostMem >= tolong({minMem})\n    and p95HostCpu >= tolong({minCpu})\n    and p95Disk >= tolong({minDisk})\n    and lastUpdatedMins >= {minLastSeen}\n| extend iothub_device = split(device, \"/\")\n| extend iothub = tostring(iothub_device[0])\n| extend device = tostring(iothub_device[1])\n| extend hubIndex = array_index_of(split(\"{IoTHub:name}\", \", \"), iothub)\n| extend hubResourceId = trim(\"'\", tostring(split(\"{IoTHub}\", \",\")[hubIndex]))\n| project hubResourceId, iothub, device, healthIndicator, statusHelper, healthText, agoText, lastUpdatedMins, p95QLen, p95HostCpu, p95HostMem, p95Disk, recentLocalMessages, recentUpstreamMessages, totalLocalMessages, totalUpstreamMessages,\n          hostCpuPercentThreshold, hostMemPercentThreshold, hostDiskPercentThreshold, localMessagesSentThreshold, upstreamMessagesSentThreshold, qlenThreshold,\n          firstPanicNoDataThresholdMins, secondPanicNoDataThresholdMins\n| order by statusHelper desc, lastUpdatedMins desc, p95QLen desc, p95HostCpu desc, p95HostMem desc, p95Disk desc, device asc;",
                    "size": 0,
                    "noDataMessage": "No results to display.  Some may have been filtered.",
                    "timeContext": {
                      "durationMs": 0
                    },
                    "timeContextFromParameter": "timeRange",
                    "showRefreshButton": true,
                    "exportFieldName": "device",
                    "exportParameterName": "SelectedDeviceDetails",
                    "exportDefaultValue": "default",
                    "queryType": 0,
                    "resourceType": "microsoft.devices/iothubs",
                    "crossComponentResources": [
                      "{IoTHub}"
                    ],
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "$gen_group",
                          "formatter": 1
                        },
                        {
                          "columnMatch": "hubResourceId",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "iothub",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "device",
                          "formatter": 7,
                          "formatOptions": {
                            "linkTarget": "WorkbookTemplate",
                            "linkIsContextBlade": false,
                            "workbookContext": {
                              "componentIdSource": "workbook",
                              "resourceIdsSource": "workbook",
                              "templateIdSource": "static",
                              "templateId": "Community-Workbooks/IoTHub/IoT Edge device details",
                              "typeSource": "workbook",
                              "gallerySource": "workbook",
                              "locationSource": "workbook",
                              "passSpecificParams": true,
                              "templateParameters": [
                                {
                                  "name": "SelectedHub",
                                  "source": "column",
                                  "value": "iothub"
                                },
                                {
                                  "name": "SelectedDevice",
                                  "source": "cell",
                                  "value": ""
                                },
                                {
                                  "name": "timeRange",
                                  "source": "parameter",
                                  "value": "timeRange"
                                },
                                {
                                  "name": "resourceId",
                                  "source": "column",
                                  "value": "hubResourceId"
                                }
                              ]
                            },
                            "customColumnWidthSetting": "20ch"
                          },
                          "tooltipFormat": {
                            "tooltip": "Open the details workbook for device '[\"device\"]'."
                          }
                        },
                        {
                          "columnMatch": "healthIndicator",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "statusHelper",
                          "formatter": 18,
                          "formatOptions": {
                            "linkTarget": "WorkbookTemplate",
                            "linkIsContextBlade": true,
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "1",
                                "representation": "2",
                                "text": "[\"healthText\"]"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "2",
                                "representation": "3",
                                "text": "[\"healthText\"]"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "-1",
                                "representation": "unknown",
                                "text": "[\"healthText\"]"
                              },
                              {
                                "operator": "<",
                                "thresholdValue": "-1",
                                "representation": "4",
                                "text": "[\"healthText\"]"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": "[\"healthText\"]"
                              }
                            ],
                            "workbookContext": {
                              "componentIdSource": "workbook",
                              "resourceIdsSource": "workbook",
                              "templateIdSource": "static",
                              "templateId": "Community-Workbooks/IoTHub/IoT Edge health snapshot",
                              "typeSource": "default",
                              "gallerySource": "default",
                              "locationSource": "default",
                              "passSpecificParams": true,
                              "templateParameters": [
                                {
                                  "name": "SelectedHub",
                                  "source": "column",
                                  "value": "iothub"
                                },
                                {
                                  "name": "resourceId",
                                  "source": "column",
                                  "value": "hubResourceId"
                                },
                                {
                                  "name": "SelectedDevice",
                                  "source": "column",
                                  "value": "device"
                                },
                                {
                                  "name": "timeRange",
                                  "source": "parameter",
                                  "value": "timeRange"
                                },
                                {
                                  "name": "SnapshotSelect",
                                  "source": "static",
                                  "value": "'CPU'"
                                },
                                {
                                  "name": "hostMemPercentThreshold",
                                  "source": "column",
                                  "value": "hostMemPercentThreshold"
                                },
                                {
                                  "name": "hostCpuPercentThreshold",
                                  "source": "column",
                                  "value": "hostCpuPercentThreshold"
                                },
                                {
                                  "name": "hostDiskPercentThreshold",
                                  "source": "column",
                                  "value": "hostDiskPercentThreshold"
                                },
                                {
                                  "name": "localMessagesSentThreshold",
                                  "source": "column",
                                  "value": "localMessagesSentThreshold"
                                },
                                {
                                  "name": "upstreamMessagesSentThreshold",
                                  "source": "column",
                                  "value": "upstreamMessagesSentThreshold"
                                },
                                {
                                  "name": "qlenThreshold",
                                  "source": "column",
                                  "value": "qlenThreshold"
                                },
                                {
                                  "name": "invokedFromFleetViewWorkbook",
                                  "source": "static",
                                  "value": "yes"
                                }
                              ]
                            }
                          },
                          "tooltipFormat": {
                            "tooltip": "Open the health snapshot workbook for '[\"device\"]'."
                          }
                        },
                        {
                          "columnMatch": "healthText",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "agoText",
                          "formatter": 2,
                          "formatOptions": {
                            "customColumnWidthSetting": "14.5ch"
                          }
                        },
                        {
                          "columnMatch": "lastUpdatedMins",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "p95QLen",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": ">=",
                                "thresholdValue": "[\"qlenThreshold\"]",
                                "representation": "trendup",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Blank",
                                "text": "{0}{1}"
                              }
                            ],
                            "customColumnWidthSetting": "17ch"
                          }
                        },
                        {
                          "columnMatch": "p95HostCpu",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": ">=",
                                "thresholdValue": "[\"hostCpuPercentThreshold\"]",
                                "representation": "trendup",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Blank",
                                "text": "{0}{1}"
                              }
                            ],
                            "customColumnWidthSetting": "16ch"
                          },
                          "numberFormat": {
                            "unit": 1,
                            "options": {
                              "style": "decimal",
                              "maximumFractionDigits": 0
                            }
                          }
                        },
                        {
                          "columnMatch": "p95HostMem",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": ">=",
                                "thresholdValue": "[\"hostMemPercentThreshold\"]",
                                "representation": "trendup",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Blank",
                                "text": "{0}{1}"
                              }
                            ],
                            "customColumnWidthSetting": "19ch"
                          },
                          "numberFormat": {
                            "unit": 1,
                            "options": {
                              "style": "decimal",
                              "maximumFractionDigits": 0
                            }
                          }
                        },
                        {
                          "columnMatch": "p95Disk",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": ">=",
                                "thresholdValue": "[\"hostDiskPercentThreshold\"]",
                                "representation": "trendup",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Blank",
                                "text": "{0}{1}"
                              }
                            ],
                            "customColumnWidthSetting": "16ch"
                          },
                          "numberFormat": {
                            "unit": 1,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false,
                              "maximumFractionDigits": 0
                            }
                          }
                        },
                        {
                          "columnMatch": "recentLocalMessages",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "recentUpstreamMessages",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "totalLocalMessages",
                          "formatter": 4,
                          "formatOptions": {
                            "palette": "blue",
                            "customColumnWidthSetting": "20ch"
                          },
                          "tooltipFormat": {
                            "tooltip": "Recent: [\"recentLocalMessages\"], Total: [\"totalLocalMessages\"]"
                          }
                        },
                        {
                          "columnMatch": "totalUpstreamMessages",
                          "formatter": 4,
                          "formatOptions": {
                            "palette": "blue",
                            "customColumnWidthSetting": "22ch"
                          },
                          "tooltipFormat": {
                            "tooltip": "Recent: [\"recentUpstreamMessages\"], Total: [\"totalUpstreamMessages\"]"
                          }
                        },
                        {
                          "columnMatch": "hostCpuPercentThreshold",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "hostMemPercentThreshold",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "hostDiskPercentThreshold",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "localMessagesSentThreshold",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "upstreamMessagesSentThreshold",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "qlenThreshold",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "firstPanicNoDataThresholdMins",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "secondPanicNoDataThresholdMins",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "colorHelper",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "device_messages_total",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "device_messages_trend",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "qlenTrend",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "cpu_used_percent",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "mem_used_percent",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "disk_used_trend",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "lastUpdatedSeconds",
                          "formatter": 5
                        }
                      ],
                      "rowLimit": 10000,
                      "filter": true,
                      "hierarchySettings": {
                        "treeType": 1,
                        "groupBy": [
                          "iothub"
                        ],
                        "expandTopLevel": true
                      },
                      "labelSettings": [
                        {
                          "columnId": "iothub",
                          "label": "IoT Hub"
                        },
                        {
                          "columnId": "device",
                          "label": "Name"
                        },
                        {
                          "columnId": "statusHelper",
                          "label": "Status"
                        },
                        {
                          "columnId": "agoText",
                          "label": "Last seen"
                        },
                        {
                          "columnId": "p95QLen",
                          "label": "QLen (p95)"
                        },
                        {
                          "columnId": "p95HostCpu",
                          "label": "CPU (p95)"
                        },
                        {
                          "columnId": "p95HostMem",
                          "label": "Memory (p95)"
                        },
                        {
                          "columnId": "p95Disk",
                          "label": "Disk (p95)"
                        },
                        {
                          "columnId": "recentLocalMessages",
                          "label": "â–³ Msg. (local)"
                        },
                        {
                          "columnId": "recentUpstreamMessages",
                          "label": "â–³ Msg. (upstream)"
                        },
                        {
                          "columnId": "totalLocalMessages",
                          "label": "# Msg. (local)"
                        },
                        {
                          "columnId": "totalUpstreamMessages",
                          "label": "# Msg. (upstream)"
                        }
                      ]
                    },
                    "sortBy": []
                  },
                  "showPin": true,
                  "name": "device-health-graph",
                  "styleSettings": {
                    "margin": "-36px 0px 0px 0px",
                    "padding": "0px 0px 0px 14px"
                  }
                }
              ]
            },
            "name": "device-health-group",
            "styleSettings": {
              "margin": "0px"
            }
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibility": {
        "parameterName": "InsightsMetricsExist",
        "comparison": "isEqualTo",
        "value": "yes"
      },
      "name": "device-group"
    }
  ],
  "fallbackResourceIds": [
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}
